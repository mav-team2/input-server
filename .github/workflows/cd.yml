name: ðŸš€ Deploy to production

on:
  pull_request:
    branches:
      - main
    types:
      - closed


permissions:
  contents: read

env:  # ì „ì—­ ë³€ìˆ˜ ì„ ì–¸
  PROJECT_NAME: input-server
  ENV_PATH: .env

jobs:
  ci:
    environment: production

    runs-on: ubuntu-latest

    steps:
      - name: âœ… Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        id: setup_python
        with:
          python-version: '3.10'
          architecture: x64

      - name: Restore Virtual env
        uses: actions/cache/restore@v4
        id: cache-venv
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
              venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Save virtual environment cache
        if: steps.cache-venv.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}


  cd:
    needs: ci
    environment: production

    runs-on: ubuntu-latest

    steps:
      - name: Create .env file
        run: |
          touch ${{ env.ENV_PATH }}
#          echo DOMAIN_FIR=${{ secrets.DOMAIN_FIR }} >> ${{ env.ENV_PATH }}
#          echo SOCKET_PORT_PROD=${{ secrets.SOCKET_PORT_PROD }} >> ${{ env.ENV_PATH }}
#          echo SOCKET_PORT_TEST=${{ secrets.SOCKET_PORT_TEST }} >> ${{ env.ENV_PATH }}

      - name: Add App to Zipfile
        run: zip ${PROJECT_NAME}.zip -r ./src ./scripts requirements.txt appspec.yml

      - name: ðŸŒŽ Access to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ðŸš› Upload to S3
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./${PROJECT_NAME}.zip \
          s3://${{ secrets.S3_BUCKET_NAME }}/${{ secrets.S3_BUCKET_DIR_NAME }}/$GITHUB_SHA.zip

      - name: ðŸš€ Deploy to EC2
        run: |
          aws deploy create-deployment \
          --application-name ${PROJECT_NAME} \
          --deployment-group-name production \
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=${{ secrets.S3_BUCKET_DIR_NAME }}/$GITHUB_SHA.zip \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --region ap-northeast-2